<?xml version="1.0" encoding="utf-8"?>
<!-- Do not remove this test for UTF-8: if “Ω” doesn’t appear as greek uppercase omega letter enclosed in quotation marks, you should use an editor that supports UTF-8, not this one. -->
<package xmlns="http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd">
  <metadata>
    <id>kiro</id>
    <version>0.1.25</version>
    <packageSourceUrl>https://github.com/publicfacingusername/choco-kiro</packageSourceUrl>
    <owners>publicfacingusername</owners>
    <title>Kiro</title>
    <authors>AWS</authors>
    <projectUrl>https://kiro.dev/</projectUrl>
    <iconUrl>https://cdn.jsdelivr.net/gh/publicfacingusername/choco-kiro@dcd22cad286e6ad7244ec63b26ebb210011b88b3/kiro_icon_scaled.svg</iconUrl>
    <licenseUrl>https://kiro.dev/license/</licenseUrl>
    <projectSourceUrl>https://kiro.dev</projectSourceUrl>
    <docsUrl>https://kiro.dev/docs/</docsUrl>
    <tags>kiro aws ide ai spec vibe</tags>
    <summary>Kiro is an AI IDE that helps you deliver from concept to production through a simplified developer experience for working with AI agents. Kiro is great at ‘vibe coding’ but goes way beyond that—Kiro’s strength is getting those prototypes into production systems with features such as specs and hooks.</summary>
    <description>

## What is Kiro?    

Kiro is an agentic IDE that helps you go from prototype to production with spec-driven development. From simple to complex tasks, Kiro works alongside you to turn prompts into detailed specs, then into working code, docs, and tests—so what you build is exactly what you want and ready to share with your team. Kiro’s agents help you solve challenging problems and automate tasks like generating documentation and unit tests. With Kiro, you can build beyond prototypes while being in the driver’s seat every step of the way.

## What is spec-driven development? How is it different from vibe coding?

Developing with specs keeps the fun of vibe coding, but fixes some of its limitations: vibe coding can require too much guidance on complex tasks or when building on top of large codebases, and it can misinterpret context. When implementing a task with vibe coding, it’s difficult to keep track of all the decisions that were made along the way, and document them for your team. By using specs, Kiro works alongside you to define requirements, system design, and tasks to be implemented before writing any code. This approach explicitly documents the reasoning and implementation decisions, so Kiro can implement more complex tasks in fewer shots.

## What programming languages does Kiro support?

Kiro supports a variety of programming languages that developers use in their day to day work. This list includes, but is not limited to Python, Java, JavaScript, TypeScript, C#, Go, Rust, PHP, Ruby, Kotlin, C, C++, shell scripting, SQL, Scala, JSON, YAML, and HCL.</description>
  </metadata>
  <files>
    <file src="tools\**" target="tools" />
  </files>
</package>
